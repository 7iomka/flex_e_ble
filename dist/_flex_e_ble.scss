// Must be added to html tag either manaully or feature detect eg modernizr
$flexbox-enable-class: '.flexbox' !default;
$special-font-stack: FreeSans, Arimo, 'Droid Sans', Helvetica, Arial, sans-serif !default;
$default-text-align: left;
$total-columns: 12 !default;

// Change to make grid break inclusive or exculsive

$column-gutter: 15px !default;
$auto-column-gutters: false !default;
$grid-padding-name: 'pad' !default;
$independant-grid-name: '' !default;

// Use to namespace the whole grid-system. eg 'wtf-' or 'cool-'
$global-name-space: '' !default;
$container-name: 'container' !default; // Could be wrapper
$grid-name: 'grid-' !default; // Could be col or column
$base-grid-name: '' !default; // Does your base grid have a sufix.
$row-name: 'row' !default; // Could be flex
$right-name: 'right' !default; // Could be push
$left-name: 'left' !default; // Could be push

// Loop over these breakpoints and pass keys into grid classes
$breakpoints: (
  'small': 480px,
  'medium': 768px,
  'large': 1024px,
  'xlarge': 1180px
) !default;

$break-dir: '>=' !default;

$enable-extra-grid: false !default;
$extra-grid-name: 'fifth' !default;
$extra-columns: 5 !default;

$grid-framework: '' !default;

@if $grid-framework == 'bootstrap' {
  $grid-name: 'col-';
  $base-grid-name: 'xs-';
  $column-gutter: 15px;
  $auto-column-gutters: true;
  $right-name: 'push';
  $left-name: 'pull';
  $breakpoints: (
    'sm': 480px,
    'md': 768px,
    'lg': 1024px,
    'xl': 1180px
  );

}

@if $grid-framework == 'foundation' {
  $column-gutter: 0.9375rem;
  $auto-column-gutters: false;
  $independant-grid-name: 'column';
  $grid-name: '';
  $base-grid-name: 'small';
  $breakpoints: (
    'medium': 768px,
    'large': 1024px
  );
}

$master-grid-name: #{$global-name-space}#{$grid-name} !default;

@if $independant-grid-name != '' {
  $master-grid-name: $independant-grid-name !default;
}

@mixin build-row {
  display: block;
  position: relative;

  letter-spacing: -0.31em; // Webkit: collapse white-space between units
  text-rendering: optimizespeed; // Webkit: fixes text-rendering: optimizeLegibility
  box-sizing: border-box;
}

@mixin build-flex-row {
  display: flex;
  flex-flow: row wrap;
}

@mixin build-grid {
  display: inline-block;

  letter-spacing: normal;
  text-align: $default-text-align;
  text-rendering: auto;
  word-spacing: normal;
  vertical-align: top;

  box-sizing: border-box;
}

@function grid-size($n) {
  @return percentage($n / $total-columns)
}

@function grid-size-special($n) {
  @return percentage($n / $extra-columns)
}

$smallest-size: nth(nth($breakpoints, 1), 1);

@mixin build-column-gutter {

  padding-right: ($column-gutter / 2);
  padding-left: ($column-gutter / 2);


  @include media('screen', '>=#{$smallest-size}') {
    padding-right: ($column-gutter);
    padding-left: ($column-gutter);
  }
}

html {
  font-family: $special-font-stack;
}

.#{$global-name-space}#{$row-name} {
  [class*='#{$master-grid-name}'] {
    font-family: $special-font-stack;
  }
}

.#{$global-name-space}#{$container-name} {
  margin-right: auto;
  margin-left: auto;

  @each $size, $breakpoint in $breakpoints {
    @include media('screen', '#{$break-dir}#{$size}') {
      max-width: $breakpoint;
    }
  }
}

.#{$global-name-space}#{$row-name} {
  @include build-row;
  width: 100%;
}

#{$flexbox-enable-class} .#{$global-name-space}#{$row-name} {
  @include build-flex-row;

  // clearfix breaks flexgrid row
  &.clearfix {
    &:before,
    &:after {
      content: initial;
    }
  }
}

[class*='#{$master-grid-name}'] {
  @include build-grid;
  @if $auto-column-gutters {
    @include build-column-gutter;
  }

  // For grids that are also rows
  &.#{$global-name-space}#{$row-name} {
    @include build-row;
    display: inline-block;
  }

  #{$flexbox-enable-class} &.#{$global-name-space}#{$row-name} {
    @include build-flex-row;
    display: inline-block;
  }
}


.#{$global-name-space}#{$grid-padding-name} {
  @include build-column-gutter;
}

@for $i from 1 through $total-columns {
  $local-size: grid-size($i);

  // Base grid
  .#{$global-name-space}#{$grid-name}#{$base-grid-name}#{$i} {
    width: $local-size;
  }

  // Offset right
  .#{$global-name-space}#{$grid-name}#{$base-grid-name}#{$right-name}-#{$i} {
    margin-left: $local-size;
  }

  // Offset left
  .#{$global-name-space}#{$grid-name}#{$base-grid-name}#{$left-name}-#{$i} {
    margin-right: $local-size;
  }

  @if $enable-extra-grid {
    .#{$global-name-space}#{$grid-name}#{$base-grid-name}-#{$i}-#{$extra-grid-name} {
      width: grid-size-special($i);
    }
  }

}

@each $size, $breakpoint in $breakpoints {
  @include media('screen', '#{$break-dir}#{$breakpoint}') {
    @for $i from 1 through $total-columns {
      $local-size: grid-size($i);

      // Responsive Grid
      .#{$global-name-space}#{$grid-name}#{$size}-#{$i} {
        width: $local-size;
      }

      // Responsive offset right
      .#{$global-name-space}#{$grid-name}#{$size}-#{$right-name}-#{$i} {
        margin-left: $local-size;
      }

      // Responsive offset left
      .#{$global-name-space}#{$grid-name}#{$size}-#{$left-name}-#{$i} {
        margin-right: $local-size;
      }

      @if $enable-extra-grid {
        .#{$global-name-space}#{$grid-name}#{$size}-#{$i}-#{$extra-grid-name} {
          width: grid-size-special($i);
        }
      }

    }
  }
}

.#{$global-name-space}#{$grid-name} {

  &#{$left-name} {
    right: auto;
  }

  &#{$right-name} {
    left: auto;
  }
}

$local-dash: '' !default;

@if str-index($master-grid-name, '-') == null {
  $local-dash: '-' !default;
}


#{$flexbox-enable-class} .#{$master-grid-name}#{$local-dash} {

  &grow {
    flex-grow: 1;
  }

  &bottom {
    align-self: flex-end;
  }

  &#{$left-name} {
    margin-right: auto;
  }

  &#{$right-name} {
    margin-left: auto;
  }
}

.#{$global-name-space}#{$row-name} {

  &-right {
    text-align: right;
  }

  &-center {
    text-align: center;
  }

  &-left {
    text-align: left;
  }

  &-reverse {
    direction: rtl;
  }
}

// ordering of items flow
#{$flexbox-enable-class} .#{$global-name-space}#{$row-name} {

  &-right {
    justify-content: flex-end;
    text-align: inherit;
  }

  &-center {
    justify-content: center;
    text-align: inherit;
  }

  &-left {
    justify-content: flex-start;
    text-align: inherit;
  }

  &-bottom {
    align-content: flex-end;
  }

  &-between {
    justify-content: space-between;
  }

  &-around {
    justify-content: space-around;
  }
}
